meta {
  name: current-values
  type: http
  seq: 6
}

get {
  url: {{host}}/api/current-values
  body: none
  auth: bearer
}

auth:bearer {
  token: {{authToken}}
}

script:post-response {
  // Script para validar a resposta
  console.log("Resposta de /api/current-values:", res.getBody());
}

tests {
  // --- Testes Automatizados da Resposta da API ---
  
  test("A Resposta da API foi um sucesso (Status 200)", () => {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("A resposta cont√©m as chaves 'value1' e 'value2'", () => {
    const body = res.getBody();
    expect(body).to.have.property("value1");
    expect(body).to.have.property("value2");
    expect(body.value1).to.be.a("number");
    expect(body.value2).to.be.a("number");
  });
}

docs {
  # Obter Valores Atuais (Vers√£o Aprimorada)
  
  Este endpoint busca os dados mais recentes do sistema. Esta vers√£o inclui testes automatizados e par√¢metros de consulta.
  
  **üîí Autentica√ß√£o Necess√°ria:**
  Requer um `authToken` v√°lido obtido atrav√©s da requisi√ß√£o de **login**.
  
  **Par√¢metros de Consulta (Opcional):**
  Uma API robusta pode permitir filtrar ou ordenar os resultados. A se√ß√£o `params:query` est√° preparada para isso, basta descomentar e ajustar os par√¢metros conforme a implementa√ß√£o da sua API.
  
  **Par√¢metros de Consulta (Query Params):**
  A API pode aceitar par√¢metros para filtrar e ordenar os resultados:
  - `limit` (number): Limita a quantidade de resultados.
  - `sort_by` (string): Campo para ordena√ß√£o (ex: `timestamp`, `value`).
  - `order` (string): `asc` ou `desc`.
  
  **Testes Automatizados:**
  A aba `Tests` foi ajustada para validar a estrutura de resposta real deste endpoint (um objeto com `value1` e `value2`).
}
