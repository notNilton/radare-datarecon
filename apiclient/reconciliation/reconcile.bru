meta {
  name: reconcile
  type: http
  seq: 3
}

post {
  url: {{host}}/api/reconcile
  body: json
  auth: bearer
}

auth:bearer {
  token: {{authToken}}
}

body:json {
  // Corpo da requisi√ß√£o com os dados para reconcilia√ß√£o.
  // Modifique estes valores para testar diferentes cen√°rios.
  {
    // "measurements": Vetor de medi√ß√µes iniciais que precisam ser ajustadas.
    "measurements": [161, 79, 80],
  
    // "tolerances": Vetor de toler√¢ncias (ou pesos) para cada medi√ß√£o.
    "tolerances": [0.05, 0.01, 0.01],
    
    // "constraints": Matriz de restri√ß√µes lineares que os dados devem satisfazer.
    // Ex: [1, -1, -1] representa a equa√ß√£o -> medi√ß√£o_1 - medi√ß√£o_2 - medi√ß√£o_3 = 0.
    "constraints": [
      [1, -1, -1]
    ]
  }
}

script:post-response {
  // --- Script para validar a resposta da reconcilia√ß√£o ---
  const response = res.getBody();
  const status = res.getStatus();
  
  // Usa um switch para lidar com os diferentes c√≥digos de status poss√≠veis
  switch (status) {
    case 200:
      console.log("Reconcilia√ß√£o de dados conclu√≠da com sucesso!");
      // Exibe os campos esperados de uma resposta de sucesso
      console.log("Valores Reconciliados:", response?.reconciled_values);
      console.log("Corre√ß√µes Aplicadas:", response?.corrections);
      console.log("Status de Consist√™ncia:", response?.consistency_status);
      break;
    case 400:
      console.error("Erro: Requisi√ß√£o inv√°lida (Bad Request). Verifique se os dados de entrada (medidas, toler√¢ncias, restri√ß√µes) est√£o corretos.");
      console.log("Detalhes do erro:", response?.error || response);
      break;
    case 401:
      console.error("Erro: N√£o autorizado (Unauthorized). O token de autentica√ß√£o √© inv√°lido ou expirou.");
      console.log("Dica: Execute a requisi√ß√£o de 'login' novamente para obter um novo token.");
      break;
    default:
      console.error(`Erro inesperado na requisi√ß√£o. Status: ${status}`);
      console.log("Resposta do servidor:", response);
      break;
  }
}

docs {
  # Reconcilia√ß√£o de Dados
  
  Este endpoint executa um algoritmo de reconcilia√ß√£o de dados a partir de um conjunto de medi√ß√µes, suas toler√¢ncias e as restri√ß√µes que elas devem obedecer.
  
  **üîí Autentica√ß√£o Necess√°ria:**
  Esta √© uma rota protegida. Voc√™ precisa executar a requisi√ß√£o de **login** primeiro para obter e salvar o `authToken`.
  
  O token √© passado no cabe√ßalho `Authorization` como um Bearer Token. A vari√°vel `{{authToken}}` √© preenchida automaticamente pelo script da requisi√ß√£o de `login`.
  
  
  **Corpo da Requisi√ß√£o:**
  - `measurements` (array[number], required): Os valores medidos que precisam ser ajustados.
  - `tolerances` (array[number], required): A toler√¢ncia ou peso associado a cada medi√ß√£o. O tamanho deste array deve ser igual ao de `measurements`.
  - `constraints` (array[array[number]], required): Uma matriz que define as equa√ß√µes lineares de balan√ßo (ex: balan√ßo de massa ou energia).
  
  **Resposta de Sucesso (200 OK):**
  A resposta conter√° os valores j√° ajustados (`reconciled_values`), as corre√ß√µes que foram aplicadas e o resultado de testes de consist√™ncia.
}
